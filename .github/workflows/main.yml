name: Main Tests

on:
 push:
   branches:
     - master
 pull_request:
   branches:
     - master

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: psf/black@stable
    - uses: actions/setup-python@v4
    - name: Flake8 Install
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Flake8 Run
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. black will have made line length 88
        # also disable E203 (space before :) since that's how black likes it
        flake8 . --count --exit-zero --max-complexity=15 --ignore=E203 \
          --max-line-length=88 --statistics

  unit_test:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest ]
        python-version: ['3.10']
    defaults:
      run:
        shell: bash -l {0}
    runs-on: ${{ matrix.os }}
    needs: lint
    steps:
    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v2
      with:
        channels: conda-forge,bioconda
        channel-priority: strict
        activate-environment: virprof
        environment-file: environment_pytest.yaml
        python-version: ${{ matrix.python-version }}
        mamba-version: "*"
    - name: Pytest Run
      run: |
        pytest

  run:
    needs: [lint, unit_test]
    strategy:
      max-parallel: 5
      matrix:
        os:
          - ubuntu-latest
#         - macos-latest
        target:
          - test.ref_hg38gtest.rnaseq_salmon
          - test.ref_hg38gtest.rnaseq_star_salmon
          - test.ref_hg38gtest.rnaseq_star_rsem
          - test.ref_hg38gtest.rnaseq_salmon.pathogen
      fail-fast: false
    runs-on:
      - ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v3
      with:
        path: virprof
    - uses: conda-incubator/setup-miniconda@v2
      with:
        channels: conda-forge,bioconda
        channel-priority: strict
        activate-environment: virprof
        environment-file: virprof/environment.yml
        mamba-version: "*"
        python-version: "3.10"
    - name: Install YMP
      run: |
        mamba update conda
        mamba env update --file virprof/environment.yml --name base
        mamba clean --all
    - name: Install Test Data
      run: |
        echo "Current directory: $PWD"
        ./virprof/test_data/install_testdata.sh
    - name: Dry-Run
      run: |
        echo "Current directory: $PWD"
        echo "test_data/:"
        ls test_data -l
        echo "test.csv:"
        cat test_data/test.csv
        ymp make -n ${{matrix.target}}
    - name: Install deps
      run: |
        echo "Current directory: $PWD"
        echo "Disk usage:"
        df -h
        ymp env prepare ${{matrix.target}}
        echo "Disk usage:"
        df -h
        mamba clean --all
        mamba info
        echo "Disk usage:"
        df -h
    - name: Run Pipeline
      run: |
        echo "Current directory: $PWD"
        ymp make ${{matrix.target}} -j2 -p

    ## LOG ##
    - name: Save pipeline reports
      uses: actions/upload-artifact@v2
      with:
        name: results-${{ matrix.os }}-${{ matrix.target }}
        path: reports/
        # Note: Not saving the actual test.generic directory because
        # it is a symlink and actions/upload-artifact@v2 has problems
        # with symlinks.
