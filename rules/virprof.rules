Env(name="virprof_r", base="bioconda",
    packages=[
        "r-magrittr",
        "r-dplyr",
        "r-readr",
        "r-purrr",
        "r-tidyr",
        "r-stringr",
        "r-fuzzyjoin",
        "r-tibble",
        "r-openxlsx",
        "r-optparse",
        "r-tidyverse",
        "r-patchwork",
        "r-ggrepel",
        "r-here",
        "bioconductor-iranges",
        "bedtools",
        "r-rentrez"
    ])

Env(name="virprof_py", base="bioconda",
    packages=[
        "graph-tool >=2.34",
        "biopython",
        "click",
        "tqdm",
        "networkx > 2",
        "requests",
    ])


with Stage("blastfilter_vp") as S:
    S.add_param("U", typ="int", name="min_unaligned_bp", default=0)
    S.doc("""This stage filters input FASTA based on BLAST hits to a
    contaminant database (e.g. host). Only sequences with at least
    Unnn basepairs not aligned to any sequence in the reference are
    passed through.""")

    rule vp_filter_blast:
        """Rule filtering individual FASTA file"""
        message: "Filtering contigs"
        input:
            fasta  = "{:prev:}/{:target:}.fasta.gz",
            blast7 = "{:prev:}/{:target:}.blast7.gz"
        output:
            fasta  = "{:this:}/{target}.fasta.gz"
        log:
            "{:this:}/{target}.log"
        threads:
            1
        conda:
            "virprof_py"
        shell:
            "python -m virprof filter-blast"
            " --min-unaligned-bp {params.min_unaligned_bp}"
            " --out {output.fasta}"
            " --in-fasta {input.fasta}"
            " --in-blast7 {input.blast7}"
            " >{log} 2>&1"

    rule vp_filter_blast_all:
        """Collection target in case this is the end of the pipeline"""
        message:
            "Finished {output}"
        input:
            "{:this:}/{:targets:}.fasta.gz"
        output:
            touch("{:this:}/all_targets.stamp")


with Stage("blastbin_vp") as S:
    S.doc("""
    """)

    rule vp_index_tree:
        message: "Creating taxonomy index for virprof bin&classify"
        input:
            ncbi_nodes = "{:prev:}/{target}.NCBI.nodes.dmp",
            ncbi_names = "{:prev:}/{target}.NCBI.names.dmp"
        output:
            "{:this:}/{target}.taxonomy.gt"
        log:
            "{:this:}/{target}.taxonomy.gt.log"
        threads:
            1
        params:
            taxonomy_prefix = lambda wc, input: input.ncbi_names[:-len("names.dmp")]
        conda:
            "virprof_py"
        shell:
            "python -m virprof index-tree"
            "  --library graph_tool"
            "  --ncbi-taxonomy {params.taxonomy_prefix}"
            "  --out {output}"

    rule vp_blastbin:
        message: "Classifying {input.blast7}"
        input:
            coverage = "{:prev:}/{:target:}.coverage",
            fasta    = "{:prev:}/{:target:}.fasta.gz",
            blast7   = "{:prev:}/{:target:}.blast7.gz",
            taxonomy = "{:this:}/ALL.taxonomy.gt"
        output:
            result   = "{:this:}/{target}.virus.csv"
        log:
                       "{:this:}/{target}.log"
        threads:
            1
        conda:
            "virprof_py"
        shell:
            "python -m virprof blastbin"
            " --out {output.result}"
            " --ncbi-taxonomy {input.taxonomy}"
            " --in-blast7 {input.blast7}"
            " --in-coverage {input.coverage}"
            " --in-fasta {input.fasta}"
            " >{log} 2>&1"

    rule vp_aggregate_classifiations:
        message: "Creating virus summary"
        input:
            #virushostdb="{:prev:}/virushostdb.csv",
            calls="{:this:}/{:targets:}.virus.csv"
        output:
            excel="{:this:}/virus_summary.xlsx",
            csv="{:this:}/result_by_sample.csv"
        log:
            "{:this:}/aggregate.log"
        params:
            this="{:this:}",
            filter="^Viruses;",
            filter_host="Homo sapiens",
            min_slen=200,
            min_reads=3
        threads:
            1
        conda:
            "virprof_r"
        shell:
            "./R/aggregate_classifications.R"
            "  --filter '{params.filter}'"
            "  --filter-host '{params.filter_host}'"
            "  --min-slen '{params.min_slen}'"
            "  --min-reads '{params.min_reads}'"
            "  --excel-out '{output.excel}'"
            "  --out '{params.this}/result_%s.csv'"
            "  {input.calls}"
            "  >{log} 2>&1"

    rule vp_show_bins:
        message: "Visualizing binning"
        input:
            calls = "{:this:}/{target}.virus.csv",
            bam    = "{:prev:}/{:target:}.sorted.bam"
        output:
            plot =  "{:this:}/{target}.virus.pdf"
        log:
            "{:this:}/{target}.show_bins.log"
        threads:
            1
        conda:
            "virprof_r"
        params:
            page_width = 22,
            page_height = 18,
            plots_per_page = 5,
            min_slen = 200,
            min_reads = 3
        shell:
            "./R/show_bins.R"
            " --input {input.calls}"
            " --input-bam {input.bam}"
            " --output {output.plot}"
            " --page-width {params.page_width}"
            " --page-height {params.page_height}"
            " --plots-per-page {params.plots_per_page}"
            " --min-slen {params.min_slen}"
            " --min-reads {params.min_reads}"
            " --no-annotate"
            " >{log} 2>&1"

    rule vp_export_fasta:
        message: "Exporting recovered genomes into bins"
        input:
            bins  = "{:this:}/{target}.virus.csv",
            fasta = "{:prev:}/{target}.fasta.gz"
        output:
            bins =  "{:this:}/{target}.bin.filelist.txt"
        log:
            "{:this:}/{target}.bin.log"
        threads: 1
        conda:
            "virprof_py"
        params:
            out_bins = "{:this:}/{target}.bin.%s.fasta.gz",
            bin_by = "species",
            filter_lineage = "^Virus",
            fasta_id_format = lambda wc: f"{wc.target}.{{bin_name}} | {{sacc}} | {{acc}}"
        shell:
            "python -m virprof export-fasta"
            " --in-bins {input.bins}"
            " --in-fasta {input.fasta}"
            " --out {params.out_bins}"
            " --bin-by {params.bin_by}"
            " --filter-lineage {params.filter_lineage}"
            " --fasta-id-format '{params.fasta_id_format}'"
            " --file-per-bin"

    rule vp_classify_all:
        input:
            summary = "{:this:}/virus_summary.xlsx",
            plots = "{:this:}/{:targets:}.virus.pdf",
            bins = "{:this:}/{:targets:}.bin.filelist.txt"
        output:
            touch("{:this:}/all_targets.stamp")
