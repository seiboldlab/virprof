Env(name="vp_rnaseq_r", base="bioconda", packages=[
    "bioconductor-tximport",
    "bioconductor-tximeta",
    "bioconductor-genomicfeatures",
    "bioconductor-genomicranges",
    "bioconductor-genomicalignments",
    "bioconductor-biocparallel",
    "bioconductor-rtracklayer",
    "bioconductor-summarizedexperiment",
    "bioconductor-deseq2",
    "r-lubridate",
    "r-readr",  # faster read
    "r-dplyr",
    "r-magrittr",
    "r-purrr",
    "r-jsonlite",
    "r-tidyr",
    "r-fs",
    "r-stringr",
    "r-tidyr",
    "r-future",
    "r-future.apply",
    "r-furrr"
])


with Stage("tximport_vp") as S:
    S.doc("""
    """)
    S.require(
        counts = [
            ["isoforms.results", "genes.results"],  # RSEM output
            ["salmon/quant.sf"],  # Salmon output
            ["exon.se.rds"],  # our own exon counting
        ],
        gtf = [["gtf"]],
        multiqc = [["/multiqc_report_data"]],
    )

    rule vp_tximport_rsem:
        message:
            "{:name:}: Importing counts from RSEM"
        input:
            counts = "{:prev:}/{:target:}.genes.results",
            transcripts = "{:prev:}/{:target:}.isoforms.results",
            gtf = "{:prev:}/{:target:}.gtf",
            meta = "{:project:}/qiime_mapping.tsv",
            multiqc = "{:prev:}/multiqc_report_data",
        output:
            counts = "{:this:}/{target}.gene_counts.rds",
            transcripts = "{:this:}/{target}.tx_counts.rds",
            stats = "{:this:}/{target}.stats.rds"
        params:
            input_type = "RSEM",
            version = ymp.get_config()._config.userdata.virprof.version,
            label = "{:this:}",
        log:
            "{:this:}/{target}.log",
        benchmark:
            "benchmarks/{:name:}/{:this:}/{target}.txt"
        resources:
            mem = "16G"
        threads:
            1
        conda:
            "vp_rnaseq_r"
        script:
            "tximport.R"


    rule vp_tximport_salmon: # ymp: extends vp_tximport_rsem
        message:
            "{:name:}: Importing counts from Salmon"
        input:
            counts = "{:prev:}/{:target:}.salmon/quant.sf",
            transcripts = [],
        params:
            input_type = "Salmon"
        threads:
            16
        resources:
            mem = "16G" # suffices for 700 samples


    rule vp_tximport_exon: # ymp: extends vp_tximport_rsem
        message:
            "{:name:}: Importing exon counts"
        input:
            counts = "{:prev:}/{:target:}.exon.se.rds",
            transcripts = [],
        resources:
            mem = "200G",
        params:
            input_type = "ExonSE"


with Stage("quant_exon_vp") as S:
    rule vp_quant_exon:
        message:
            "{:name:}: Counting exon overlaps for {input.bam}"
        input:
            bam = "{:prev:}/{:target:}.bam",
            gtf = "{:prev:}/{:target:}.gtf",
        output:
            se = "{:this:}/{target}.exon.se.rds",
        log:
            "{:this:}/{target}.log"
        benchmark:
            "benchmarks/{:name:}/{:this:}/{target}.txt"
        params:
            single_gene_only = True,
            # DEXSeq will fail if set to False
        threads:
            2
        resources:
            mem = "12g"
        conda:
            "vp_rnaseq_r"
        script:
            "quant_exon.R"


with Stage("report_vp") as S:
    def make_label(wildcards):
        # keep in sync with virprof.rules
        version = str(ymp.get_config()._config.userdata.virprof.version)
        prefix = wildcards._YMP_DIR
        pipeline = []
        if "map_star" in prefix:
            pipeline += ["star"]
        if "quant_salmon_sa" in prefix:
            pipeline += ["salmon_sa"]
        elif "quant_salmon" in prefix:
            pipeline += ["salmon"]
        if "quant_rsem" in prefix:
            pipeline += ["rsem"]
        if "quant_exon_vp" in prefix:
            pipeline += ["exon"]
        if "dedup_umi_vp" in prefix:
            pipeline += ["umi"]
        return "_".join(pipeline or ["unknown"]) + "." + version

    localrules: vp_rnaseq_report
    rule vp_rnaseq_report:
        message:
            "Copying results to reports directory"
        input:
            "{:prev:}/{:target:}.gene_counts.rds",
            "{:prev:}/{:target:}.tx_counts.rds",
            "{:prev:}/{:target:}.stats.rds",
            "{:prev:}/multiqc_report.html",
            directory("{:prev:}/multiqc_report_data"),
        output:
            "{:this:}/{target}.gene_counts.rds",
            "{:this:}/{target}.tx_counts.rds",
            "{:this:}/{target}.stats.rds",
            "{:this:}/{target}.multiqc_report.html",
            directory("{:this:}/{target}.multiqc_report_data"),
        log:
            "{:this:}/{target}.log"
        benchmark:
            "benchmarks/{:name:}/{:this:}/{target}.txt"
        threads:
            1
        resources:
            mem = "50m"
        params:
            slack_hook = "",  # should be trailing part of form xxx/xxx/xxx
            reporttpl  = "{:ensuredir.reports:}/{:project:}.$LABEL.$TYPE.%Y-%m-%d_%H-%M$EXT",
            project = "{:project:}",
            label = make_label,
            version = ymp.get_config()._config.userdata.virprof.version,
        shell:
            "exec >{log} 2>&1;"
            "SRCS=({input});"
            "DSTS=({output});"
            "MSG=\"New RNA-Seq (v{params.version}) results for \`{params.project}\`:\n\n\";"
            "LABEL={params.label};"
            "for i in \"${{!SRCS[@]}}\"; do"
            "  echo Copying ${{SRCS[i]}} to ${{DSTS[i]}};"
            "  cp -a ${{SRCS[i]}} ${{DSTS[i]}};"
            "  BASE=$(basename ${{SRCS[i]}});"
            "  SUFFIX=${{BASE#{wildcards.target}.}};"
            "  TYPE=${{SUFFIX%.*}};"
            "  EXT=${{SUFFIX#*.}};"
            "  if [ \"$TYPE\"a == \"$EXT\"a ]; then"
            "    EXT=;"
            "  else"
            "    EXT=\".$EXT\";"
            "  fi;"
            "  REPORT=$(date +{params.reporttpl});"
            "  echo Copying ${{SRCS[i]}} to $REPORT;"
            "  cp -a ${{SRCS[i]}} $REPORT;"
            "  MSG=\"$MSG\n- \`$REPORT\`\";"
            "done;"
            "if [ -n \"{params.slack_hook}\" ]; then"
            "  curl"
            "    --request POST"
            "    --header 'Content-type: application/json'"
            "    --data '{{\"text\":\"'\"$MSG\"'\"}}'"
            "    https://hooks.slack.com/services/{params.slack_hook};"
            "fi;"
