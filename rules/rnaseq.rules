Env(name="tximport",base="bioconda", packages=[
    "bioconductor-tximport",
    "bioconductor-tximeta",
    "r-readr"  # faster read
    ])

with Stage("tximport_vp") as S:
    S.doc("""
    """)
    S.require(
        counts = [
            ["isoforms.results", "genes.results"],  # RSEM output
            ["salmon/quant.sf"]  # Salmon output
        ],
        gtf = [["gtf"]],
    )

    rule vp_tximport_rsem:
        message:
            "{:name:}: Importing counts from RSEM"
        input:
            counts = "{:prev:}/{:target:}.genes.results",
            transcripts = "{:prev:}/{:target:}.isoforms.results",
            gtf = "{:prev:}/{:target:}.gtf",
            meta = "{:project:}/qiime_mapping.tsv",
        output:
            counts = "{:this:}/{target}.gene_counts.rds",
            transcripts = "{:this:}/{target}.tx_counts.rds",
        params:
            input_type = "RSEM",
            version = ymp.get_config()._config.userdata.virprof.version,
            label = "{:this:}",
        log:
            "{:this:}/{target}.log",
        resources:
            mem = "16G"
        threads:
            1
        conda:
            "tximport"
        script:
            "tximport.R"


    rule vp_tximport_salmon: # ymp: extends vp_tximport_rsem
        message:
            "{:name:}: Importing counts from Salmon"
        input:
            counts = "{:prev:}/{:target:}.salmon/quant.sf",
            transcripts = [],
        params:
            input_type = "Salmon"


with Stage("report_vp") as S:
    def make_label(wildcards):
        version = str(ymp.get_config()._config.userdata.virprof.version)
        prefix = wildcards._YMP_DIR
        pipeline = []
        if "map_star" in prefix:
            pipeline += ["star"]
        if "quant_salmon_sa" in prefix:
            pipeline += ["salmon_sa"]
        if "quant_rsem" in prefix:
            pipeline += ["rsem"]
        if "quant_salmon" in prefix:
            pipeline += ["salmon"]
        return "_".join(pipeline or ["unknown"]) + "." + version

    localrules: vp_rnaseq_report
    rule vp_rnaseq_report:
        message:
            "Copying results to reports directory"
        input:
            "{:prev:}/{:target:}.gene_counts.rds",
            "{:prev:}/{:target:}.tx_counts.rds",
            "{:prev:}/multiqc_report.html",
            directory("{:prev:}/multiqc_report_data"),
        output:
            "{:this:}/{target}.gene_counts.rds",
            "{:this:}/{target}.tx_counts.rds",
            "{:this:}/{target}.multiqc_report.html",
            directory("{:this:}/{target}.multiqc_report_data"),
        log:
            "{:this:}/{target}.log"
        threads:
            1
        resources:
            mem = "50m"
        params:
            slack_hook = "",  # should be trailing part of form xxx/xxx/xxx
            this = "{:this:}",
            reporttpl  = "{:ensuredir.reports:}/{:project:}.$LABEL.$TYPE.%Y-%m-%d_%H-%M$EXT",
            project = "{:project:}",
            label = make_label,
            version = ymp.get_config()._config.userdata.virprof.version,
        shell:
            "exec >{log} 2>&1;"
            "SRCS=({input});"
            "DSTS=({output});"
            "MSG=\"New RNA-Seq (v{params.version}) results for \`{params.project}\`:\n\n\";"
            "LABEL={params.label};"
            "for i in \"${{!SRCS[@]}}\"; do"
            "  echo Copying ${{SRCS[i]}} to ${{DSTS[i]}};"
            "  cp -a ${{SRCS[i]}} ${{DSTS[i]}};"
            "  BASE=$(basename ${{SRCS[i]}});"
            "  SUFFIX=${{BASE#{wildcards.target}.}};"
            "  TYPE=${{SUFFIX%.*}};"
            "  EXT=${{SUFFIX#*.}};"
            "  if [ \"$TYPE\"a == \"$EXT\"a ]; then"
            "    EXT=;"
            "  else"
            "    EXT=\".$EXT\";"
            "  fi;"
            "  REPORT=$(date +{params.reporttpl});"
            "  echo Copying $REPORT to $REPORT;"
            "  cp -a ${{SRCS[i]}} $REPORT;"
            "  MSG=\"$MSG\n- \`$REPORT\`\";"
            "done;"
            "if [ -n \"{params.slack_hook}\" ]; then"
            "  curl"
            "    --request POST"
            "    --header 'Content-type: application/json'"
            "    --data '{{\"text\":\"'\"$MSG\"'\"}}'"
            "    https://hooks.slack.com/services/{params.slack_hook};"
            "fi;"
