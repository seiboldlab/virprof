Env(name="virprof_r", base="bioconda",
    packages=[
        "r-magrittr",
        "r-dplyr",
        "r-readr",
        "r-purrr",
        "r-tidyr",
        "r-stringr",
        "r-fuzzyjoin",
        "r-tibble",
        "r-openxlsx",
        "r-optparse",
    ])

Env(name="virprof_py", base="bioconda",
    packages=[
        "ymp=0.2.1",
        "graph-tool",
    ])


with Stage("classify"):
    rule blast_classify_index:
        message: "Creating taxonomy index for virprof bin&classify"
        input:
            ncbi_nodes = "{:prev:}/{target}.NCBI.nodes.dmp",
            ncbi_names = "{:prev:}/{target}.NCBI.names.dmp"
        output:
            "{:this:}/{target}.taxonomy.gt"
        log:
            "{:this:}/{target}.taxonomy.gt.log"
        threads:
            1
        params:
            taxonomy_prefix = lambda wc, input: input.ncbi_names[:-len("names.dmp")]
        conda:
            "virprof_py"
        shell:
            "python -m virprof index-tree"
            "  --library graph_tool"
            "  --ncbi-taxonomy {params.taxonomy_prefix}"
            "  --out {output}"

    rule blast_classify:
        message: "Classifying {input.blast7}"
        input:
            coverage = "{:prev:}/{:target:}.coverage",
            blast7   = "{:prev:}/{:target:}.blast7",
            taxonomy = "{:this:}/ALL.taxonomy.gt"
        output:
            result   = "{:this:}/{target}.virus.csv"
        log:
                       "{:this:}/{target}.log"
        threads:
            1
        conda:
            "virprof_py"
        shell:
            "python -m virprof blastbin"
            " --out {output.result}"
            " --ncbi-taxonomy {input.taxonomy}"
            " {input.blast7}"
            " {input.coverage}"
            " >{log} 2>&1"

    rule aggregate_virus:
        message: "Creating virus summary"
        input:
            #virushostdb="{:prev:}/virushostdb.csv",
            calls="{:this:}/{:targets:}.virus.csv"
        output:
            excel="{:this:}/virus_summary.xlsx",
            csv="{:this:}/result_by_sample.csv"
        log:
            "{:this:}/aggregate.log"
        params:
            this="{:this:}",
            filter="^Viruses;",
            filter_host="Homo sapiens",
            min_alen=200,
            min_reads=3
        threads:
            1
        conda:
            "virprof_r"
        shell:
            "./scripts/aggregate_classifications.R"
            "  --filter '{params.filter}'"
            "  --filter-host '{params.filter_host}'"
            "  --min-alen '{params.min_alen}'"
            "  --min-reads '{params.min_reads}'"
            "  --excel-out '{output.excel}'"
            "  --out '{params.this}/result_%s.csv'"
            "  {input.calls}"
            "  >{log} 2>&1"

    rule collect_all:
        input:
            "{:this:}/virus_summary.xlsx"
        output:
            touch("{:this:}/all_targets.stamp")
